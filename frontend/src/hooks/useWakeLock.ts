import { useCallback, useEffect, useRef, useState } from 'react';

type WakeLockSentinel = any;

const NO_SLEEP_VIDEO_SRC =
  'data:video/mp4;base64,AAAAIGZ0eXBpc29tAAAAAGlzb21pc28yYXZjMQAAAAhmcmVlAAACM21kYXQhEAUAAAMABAAAAwGqYXBwbAQAAAH//wAAAw

const GESTURE_EVENTS: Array<keyof DocumentEventMap> = ['pointerdown', 'touchstart', 'mousedown', 'keydown', 'click'];
const VIDEO_REFRESH_INTERVAL_MS = 15_000;

export function useWakeLock(enabled: boolean) {
  const sentinelRef = useRef<WakeLockSentinel | null>(null);
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const gestureHandlerRef = useRef<EventListener | null>(null);
  const videoLoopTimerRef = useRef<number | null>(null);
  const [isActive, setIsActive] = useState(false);

  const ensureVideo = useCallback(() => {
    if (videoRef.current) return videoRef.current;
    const video = document.createElement('video');
    video.setAttribute('playsinline', '');
    video.setAttribute('muted', '');
    video.setAttribute('loop', '');
    video.setAttribute('autoplay', '');
    video.muted = true;
    video.loop = true;
    video.src = NO_SLEEP_VIDEO_SRC;
    Object.assign(video.style, {
      position: 'fixed',
      width: '1px',
      height: '1px',
      opacity: '0',
      pointerEvents: 'none',
      top: '0',
      left: '0'
    });
    document.body.appendChild(video);
    videoRef.current = video;
    return video;
  }, []);

  const clearGestureRetry = useCallback(() => {
    if (!gestureHandlerRef.current) return;
    GESTURE_EVENTS.forEach((event) =>
      document.removeEventListener(event, gestureHandlerRef.current as EventListener)
    );
    gestureHandlerRef.current = null;
  }, []);

  const stopVideoLoop = useCallback(() => {
    if (videoLoopTimerRef.current !== null) {
      window.clearInterval(videoLoopTimerRef.current);
      videoLoopTimerRef.current = null;
    }
  }, []);

  const startVideoFallback = useCallback(async () => {
    const video = ensureVideo();
    try {
      await video.play();
      stopVideoLoop();
      videoLoopTimerRef.current = window.setInterval(() => {
        const element = videoRef.current;
        if (!element) return;
        element.play().catch(() => undefined);
      }, VIDEO_REFRESH_INTERVAL_MS);
      setIsActive(true);
      clearGestureRetry();
      return true;
    } catch (error) {
      console.warn('wakeLock_video_failed', error);
      return false;
    }
  }, [clearGestureRetry, ensureVideo, stopVideoLoop]);

  const scheduleGestureRetry = useCallback(() => {
    if (gestureHandlerRef.current) return;

    const handler: EventListener = async () => {
      clearGestureRetry();
      const success = await startVideoFallback();
      if (!success) {
        scheduleGestureRetry();
      }
    };

    gestureHandlerRef.current = handler;
    GESTURE_EVENTS.forEach((event) =>
      document.addEventListener(event, handler, { once: true })
    );
  }, [clearGestureRetry, startVideoFallback]);

  const stopVideoFallback = useCallback(() => {
    stopVideoLoop();
    if (videoRef.current) {
      videoRef.current.pause();
      videoRef.current.remove();
      videoRef.current = null;
    }
    clearGestureRetry();
  }, [clearGestureRetry, stopVideoLoop]);

  const requestLock = useCallback(async () => {
    if (!enabled) return;
    try {
      if ('wakeLock' in navigator && 'request' in (navigator as any).wakeLock) {
        sentinelRef.current = await (navigator as any).wakeLock.request('screen');
        setIsActive(true);
        sentinelRef.current?.addEventListener?.('release', () => setIsActive(false));
        return;
      }
    } catch (error) {
      console.warn('wakeLock_request_failed', error);
    }

    const success = await startVideoFallback();
    if (!success) {
      scheduleGestureRetry();
    }
  }, [enabled, scheduleGestureRetry, startVideoFallback]);

  const releaseLock = useCallback(async () => {
    try {
      await sentinelRef.current?.release?.();
    } catch (error) {
      console.warn('wakeLock_release_failed', error);
    } finally {
      sentinelRef.current = null;
      stopVideoFallback();
      setIsActive(false);
    }
  }, [stopVideoFallback]);

  useEffect(() => {
    if (!enabled) {
      void releaseLock();
      return;
    }

    void requestLock();

    const handleVisibility = () => {
      if (document.visibilityState === 'visible' && enabled) {
        void requestLock();
      }
    };

    const handleFocus = () => {
      if (enabled) {
        void requestLock();
      }
    };

    document.addEventListener('visibilitychange', handleVisibility);
    window.addEventListener('focus', handleFocus);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibility);
      window.removeEventListener('focus', handleFocus);
      void releaseLock();
    };
  }, [enabled, releaseLock, requestLock]);

  return isActive;
}
